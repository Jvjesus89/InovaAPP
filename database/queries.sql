-- =====================================================
-- CONSULTAS PARA A TABELA PRODUTOS
-- =====================================================

-- Estrutura da tabela produtos
CREATE TABLE public.produtos (
  idproduto bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  codigo character varying NULL,
  descricao character varying NOT NULL,
  preco numeric NULL,
  dtcadastro date NULL,
  CONSTRAINT produtos_pkey PRIMARY KEY (idproduto)
) TABLESPACE pg_default;

-- =====================================================
-- CONSULTAS DE SELEÇÃO (SELECT)
-- =====================================================

-- 1. Listar todos os produtos ordenados por descrição
SELECT * FROM produtos ORDER BY descricao ASC;

-- 2. Listar produtos com preço maior que zero
SELECT * FROM produtos WHERE preco > 0 ORDER BY preco DESC;

-- 3. Buscar produtos por código
SELECT * FROM produtos WHERE codigo ILIKE '%CODIGO%';

-- 4. Buscar produtos por descrição
SELECT * FROM produtos WHERE descricao ILIKE '%DESCRICAO%';

-- 5. Produtos cadastrados em uma data específica
SELECT * FROM produtos WHERE dtcadastro = '2024-01-15';

-- 6. Produtos cadastrados no último mês
SELECT * FROM produtos 
WHERE dtcadastro >= CURRENT_DATE - INTERVAL '1 month'
ORDER BY dtcadastro DESC;

-- 7. Contar total de produtos
SELECT COUNT(*) as total_produtos FROM produtos;

-- 8. Produtos sem código
SELECT * FROM produtos WHERE codigo IS NULL OR codigo = '';

-- 9. Produtos sem preço
SELECT * FROM produtos WHERE preco IS NULL;

-- 10. Média de preços dos produtos
SELECT AVG(preco) as media_precos FROM produtos WHERE preco IS NOT NULL;

-- 11. Produto mais caro
SELECT * FROM produtos WHERE preco = (SELECT MAX(preco) FROM produtos);

-- 12. Produto mais barato
SELECT * FROM produtos WHERE preco = (SELECT MIN(preco) FROM produtos WHERE preco > 0);

-- =====================================================
-- CONSULTAS DE INSERÇÃO (INSERT)
-- =====================================================

-- 13. Inserir novo produto
INSERT INTO produtos (codigo, descricao, preco, dtcadastro) 
VALUES ('PROD001', 'Produto Teste', 29.99, CURRENT_DATE);

-- 14. Inserir produto sem código
INSERT INTO produtos (descricao, preco, dtcadastro) 
VALUES ('Produto sem código', 15.50, CURRENT_DATE);

-- 15. Inserir produto sem preço
INSERT INTO produtos (codigo, descricao, dtcadastro) 
VALUES ('PROD002', 'Produto sem preço', CURRENT_DATE);

-- =====================================================
-- CONSULTAS DE ATUALIZAÇÃO (UPDATE)
-- =====================================================

-- 16. Atualizar preço de um produto
UPDATE produtos 
SET preco = 35.99 
WHERE idproduto = 1;

-- 17. Atualizar descrição de um produto
UPDATE produtos 
SET descricao = 'Nova descrição do produto' 
WHERE idproduto = 1;

-- 18. Atualizar código de um produto
UPDATE produtos 
SET codigo = 'NOVO_CODIGO' 
WHERE idproduto = 1;

-- 19. Aumentar preço em 10%
UPDATE produtos 
SET preco = preco * 1.10 
WHERE preco IS NOT NULL;

-- 20. Definir preço zero para produtos sem preço
UPDATE produtos 
SET preco = 0 
WHERE preco IS NULL;

-- =====================================================
-- CONSULTAS DE EXCLUSÃO (DELETE)
-- =====================================================

-- 21. Excluir produto específico
DELETE FROM produtos WHERE idproduto = 1;

-- 22. Excluir produtos sem código
DELETE FROM produtos WHERE codigo IS NULL OR codigo = '';

-- 23. Excluir produtos com preço zero
DELETE FROM produtos WHERE preco = 0;

-- 24. Excluir produtos cadastrados antes de uma data
DELETE FROM produtos WHERE dtcadastro < '2024-01-01';

-- =====================================================
-- CONSULTAS AVANÇADAS
-- =====================================================

-- 25. Produtos agrupados por faixa de preço
SELECT 
  CASE 
    WHEN preco < 10 THEN 'Até R$ 10,00'
    WHEN preco < 50 THEN 'R$ 10,00 a R$ 50,00'
    WHEN preco < 100 THEN 'R$ 50,00 a R$ 100,00'
    ELSE 'Acima de R$ 100,00'
  END as faixa_preco,
  COUNT(*) as quantidade
FROM produtos 
WHERE preco IS NOT NULL
GROUP BY 
  CASE 
    WHEN preco < 10 THEN 'Até R$ 10,00'
    WHEN preco < 50 THEN 'R$ 10,00 a R$ 50,00'
    WHEN preco < 100 THEN 'R$ 50,00 a R$ 100,00'
    ELSE 'Acima de R$ 100,00'
  END
ORDER BY quantidade DESC;

-- 26. Produtos cadastrados por mês
SELECT 
  TO_CHAR(dtcadastro, 'YYYY-MM') as mes,
  COUNT(*) as produtos_cadastrados
FROM produtos 
WHERE dtcadastro IS NOT NULL
GROUP BY TO_CHAR(dtcadastro, 'YYYY-MM')
ORDER BY mes DESC;

-- 27. Top 10 produtos mais caros
SELECT * FROM produtos 
WHERE preco IS NOT NULL
ORDER BY preco DESC 
LIMIT 10;

-- 28. Produtos com preço entre valores
SELECT * FROM produtos 
WHERE preco BETWEEN 10.00 AND 100.00
ORDER BY preco ASC;

-- 29. Produtos que começam com determinada letra
SELECT * FROM produtos 
WHERE descricao ILIKE 'A%'
ORDER BY descricao;

-- 30. Produtos com código numérico
SELECT * FROM produtos 
WHERE codigo ~ '^[0-9]+$'
ORDER BY codigo;

-- =====================================================
-- CONSULTAS PARA RELATÓRIOS
-- =====================================================

-- 31. Relatório geral de produtos
SELECT 
  COUNT(*) as total_produtos,
  COUNT(codigo) as produtos_com_codigo,
  COUNT(preco) as produtos_com_preco,
  AVG(preco) as preco_medio,
  MIN(preco) as preco_minimo,
  MAX(preco) as preco_maximo,
  MIN(dtcadastro) as primeiro_cadastro,
  MAX(dtcadastro) as ultimo_cadastro
FROM produtos;

-- 32. Produtos recentes (últimos 7 dias)
SELECT * FROM produtos 
WHERE dtcadastro >= CURRENT_DATE - INTERVAL '7 days'
ORDER BY dtcadastro DESC;

-- 33. Produtos antigos (mais de 30 dias)
SELECT * FROM produtos 
WHERE dtcadastro < CURRENT_DATE - INTERVAL '30 days'
ORDER BY dtcadastro ASC;

-- =====================================================
-- ÍNDICES RECOMENDADOS
-- =====================================================

-- Criar índices para melhorar performance
CREATE INDEX idx_produtos_descricao ON produtos(descricao);
CREATE INDEX idx_produtos_codigo ON produtos(codigo);
CREATE INDEX idx_produtos_preco ON produtos(preco);
CREATE INDEX idx_produtos_dtcadastro ON produtos(dtcadastro);

-- =====================================================
-- TRIGGERS ÚTEIS
-- =====================================================

-- Trigger para atualizar data de cadastro automaticamente
CREATE OR REPLACE FUNCTION update_dtcadastro()
RETURNS TRIGGER AS $$
BEGIN
  IF NEW.dtcadastro IS NULL THEN
    NEW.dtcadastro = CURRENT_DATE;
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_update_dtcadastro
  BEFORE INSERT ON produtos
  FOR EACH ROW
  EXECUTE FUNCTION update_dtcadastro();

-- =====================================================
-- VIEWS ÚTEIS
-- =====================================================

-- View para produtos ativos (com preço)
CREATE VIEW produtos_ativos AS
SELECT * FROM produtos 
WHERE preco IS NOT NULL AND preco > 0
ORDER BY descricao;

-- View para produtos sem preço
CREATE VIEW produtos_sem_preco AS
SELECT * FROM produtos 
WHERE preco IS NULL OR preco = 0
ORDER BY descricao;

-- View para produtos recentes
CREATE VIEW produtos_recentes AS
SELECT * FROM produtos 
WHERE dtcadastro >= CURRENT_DATE - INTERVAL '30 days'
ORDER BY dtcadastro DESC; 